type: edu
files:
  - name: src/tasklist/Main.kt
    visible: true
    text: |
      package tasklist
      
      import kotlinx.datetime.*
      
      fun main() {
          TaskListApplication().run()
      }
      
      class Task(private val priority: Char, private val dateTime: LocalDateTime, private val lines: List<String>) {
          fun printHeader(number: Int) {
              print("${(number + 1).toString().padEnd(2, ' ')} ")
              println("${dateTime.date} ${dateTime.time} $priority")
          }
      
          fun printLines() {
              lines.forEach { line ->
                  println("   $line")
              }
          }
      }
      
      class TaskListApplication {
          private val tasks = mutableListOf<Task>()
      
          fun run() {
              var action: String
      
              do {
                  println("Input an action (add, print, end):")
                  action = readln().lowercase().trim()
      
                  when (action) {
                      "add" -> addNewTask()
                      "print" -> printTasks()
                      "end" -> println("Tasklist exiting!")
                      else -> println("The input action is invalid")
                  }
              } while (action != "end")
          }
      
          private fun addNewTask() {
              val priority: Char = promptForPriority()
      
              val date: LocalDate = promptForDate()
              val dateTime: LocalDateTime = promptForTime(date)
      
              val lines: List<String> = promptForTaskLines()
      
              val newTask = Task(priority, dateTime, lines)
      
              tasks.add(newTask)
          }
      
          private fun promptForTaskLines(): List<String> {
              while (true) {
                  println("Input a new task (enter a blank line to end):")
                  val lines = generateSequence { readlnOrNull()?.trim() }
                      .takeWhile { it.isNotBlank() }
                      .toList()
      
                  if (lines.isEmpty()) {
                      println("The task is blank")
                  } else {
                      return lines
                  }
              }
          }
      
          private fun promptForPriority(): Char {
              val validPriorities = listOf('C', 'H', 'N', 'L')
      
              while (true) {
                  println("Input the task priority (C, H, N, L):")
                  val input = readln().trim().uppercase()
      
                  if (input.length == 1 && input[0] in validPriorities) {
                      return input[0]
                  }
              }
          }
      
          private fun promptForDate(): LocalDate {
              while (true) {
                  println("Input the date (yyyy-mm-dd):")
                  try {
                      val (inputYear, inputMonth, inputDay) = readln().trim().split('-').map { it.toInt() }
                      return LocalDate(inputYear, inputMonth, inputDay)
                  } catch (e: Exception) {
                      println("The input date is invalid")
                  }
              }
          }
      
          private fun promptForTime(date: LocalDate): LocalDateTime {
              while (true) {
                  println("Input the time (hh:mm):")
                  try {
                      val (hours, minutes) = readln().trim().split(':').map { it.toInt() }
                      return LocalDateTime(date.year, date.monthNumber, date.dayOfMonth, hours, minutes)
                  } catch (e: Exception) {
                      println("The input time is invalid")
                  }
              }
          }
      
          private fun printTasks() {
              if (tasks.isEmpty()) {
                  println("No tasks have been input")
                  return
              }
      
              tasks.forEachIndexed { index, task ->
                  task.printHeader(index)
                  task.printLines()
      
                  println();
              }
          }
      }
    learner_created: false
  - name: test/TasklistTest.kt
    visible: false
    text: |+
      import kotlinx.datetime.*
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testing.TestedProgram
      
      class TasklistTest : StageTest<Any>() {
          // Wrong task input
          @DynamicTest(order = 1)
          fun tasklistTest14(): CheckResult {
              val inputStrings = listOf("input", "task", "",  "123", " ")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              for (s in inputStrings) {
                  if (!co.input(s, "The input action is invalid"))
                      return CheckResult(false, "Your output should contain \"The input action is invalid\"")
                  if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              }
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Wrong priority is input
          @DynamicTest(order = 2)
          fun tasklistTest15(): CheckResult {
              val inputStrings = listOf("normal", "Critical", "low",  "high", " ")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
      
              for (s in inputStrings) {
                  if (!co.input(s, "Input the task priority (C, H, N, L):"))
                      return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              }
      
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("Happy new year!\n\n", "Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Wrong date is input
          @DynamicTest(order = 3)
          fun tasklistTest16(): CheckResult {
              val inputStrings = listOf("2021-2-29", "2021-13-1", "2021-12-32",  "thisDay", " ")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
      
              for (s in inputStrings) {
                  if (!co.input(s, "The input date is invalid"))
                      return CheckResult(false, "Your output should contain \"The input date is invalid\"")
                  if (!co.inputNext("Input the date (yyyy-mm-dd):"))
                      return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              }
      
              if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("Happy new year!\n\n", "Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Wrong time is input
          @DynamicTest(order = 4)
          fun tasklistTest17(): CheckResult {
              val inputStrings = listOf("24:00", "12:60", "12.12",  "thisTime", " ")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
      
              for (s in inputStrings) {
                  if (!co.input(s, "The input time is invalid"))
                      return CheckResult(false, "Your output should contain \"The input time is invalid\"")
                  if (!co.inputNext("Input the time (hh:mm):"))
                      return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              }
      
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("Happy new year!\n\n", "Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Blank task is input
          @DynamicTest(order = 5)
          fun tasklistTest18(): CheckResult {
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2022-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("     ", "The task is blank"))
                  return CheckResult(false, "Your output should contain \"The task is blank\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // No tasks have been input
          @DynamicTest(order = 6)
          fun tasklistTest19(): CheckResult {
              val inputStrings = listOf("print", "edit", "delete")
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              for (s in inputStrings) {
                  if (!co.input(s, "No tasks have been input"))
                      return CheckResult(false, "Your output should contain \"No tasks have been input\"")
                  if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\""
                      )
              }
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Normal task addition
          @DynamicTest(order = 7)
          fun tasklistTest24(): CheckResult {
              val now = Clock.System.now()
              val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
              val sameDay = currentDate.toString()
              val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
              val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()
      
              val inputStrings = arrayListOf(
                  arrayOf("C", sameDay, "17:00", "See my dentist\n\n"),
                  arrayOf("h", daysAfter, "17:00", "Cinema: get tickets\nCheck movie reviews\n\n"),
                  arrayOf("n", daysBefore, "19:00", "Supermarket\nChocolates\nflour\noranges\n\n",),
                  arrayOf("l", daysAfter, "12:00", "Buy book\n\n")
              )
      
              val outputStrings = arrayListOf(
                  arrayOf("| 1  | $sameDay | 17:00 | \u001B[101m \u001B[0m | \u001B[103m \u001B[0m |See my dentist                              |"),
                  arrayOf("| 2  | $daysAfter | 17:00 | \u001B[103m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |",
                      "|    |            |       |   |   |Check movie reviews                         |"),
                  arrayOf("| 3  | $daysBefore | 19:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |Supermarket                                 |",
                      "|    |            |       |   |   |Chocolates                                  |",
                      "|    |            |       |   |   |flour                                       |",
                      "|    |            |       |   |   |oranges                                     |"),
                  arrayOf("| 4  | $daysAfter | 12:00 | \u001B[104m \u001B[0m | \u001B[102m \u001B[0m |Buy book                                    |")
              )
      
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              for (taskInput in inputStrings) {
                  if (!co.input("add", "Input the task priority (C, H, N, L):"))
                      return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
                  if (!co.input(taskInput[0], "Input the date (yyyy-mm-dd):"))
                      return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
                  if (!co.input(taskInput[1], "Input the time (hh:mm):"))
                      return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
                  if (!co.input(taskInput[2], "Input a new task (enter a blank line to end):"))
                      return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
                  if (!co.input(taskInput[3], "Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              }
      
              co.getNextOutput("print")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              for (s in outputStrings) {
                  if (!co.inputNext(*s)) {
                      val str = StringBuilder()
                      s.forEach { str.appendLine(it) }
                      return CheckResult(false, "Your output should contain \"${str.toString()}\"")
                  }
                  if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                      return CheckResult(false, "Wrong dividing line." +
                              "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              }
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Tasks deletion
          @DynamicTest(order = 8)
          fun tasklistTest25(): CheckResult {
              val now = Clock.System.now()
              val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
              val sameDay = currentDate.toString()
              val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
              val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()
      
              val inputStrings = arrayListOf(
                  arrayOf("N", daysAfter, "17:00", "Cinema: get tickets\n\n"),
                  arrayOf("l", daysBefore, "12:00", "Buy book\n\n")
              )
      
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              for (taskInput in inputStrings) {
                  if (!co.input("add", "Input the task priority (C, H, N, L):"))
                      return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
                  if (!co.input(taskInput[0], "Input the date (yyyy-mm-dd):"))
                      return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
                  if (!co.input(taskInput[1], "Input the time (hh:mm):"))
                      return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
                  if (!co.input(taskInput[2], "Input a new task (enter a blank line to end):"))
                      return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
                  if (!co.input(taskInput[3], "Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              }
      
              co.getNextOutput("delete")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | $daysAfter | 17:00 | \u001B[102m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | $daysAfter | 17:00 | \u001B[102m \u001B[0m | \u001B[102m \u001B[0m |Cinema: get tickets                         |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("| 2  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 2  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
      
              if (!co.inputNext("Input the task number (1-2):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-2):\"")
      
              if (!co.input("1", "The task is deleted"))
                  return CheckResult(false, "Your output should contain \"The task is deleted\"")
      
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("delete")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 2  | $daysBefore | 12:00 | \u001B[104m \u001B[0m | \u001B[101m \u001B[0m |Buy book                                    |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
      
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
      
              if (!co.input("1", "The task is deleted"))
                  return CheckResult(false, "Your output should contain \"The task is deleted\"")
      
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("delete", "No tasks have been input"))
                  return CheckResult(false, "Your output should contain \"No tasks have been input\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("print", "No tasks have been input"))
                  return CheckResult(false, "Your output should contain \"No tasks have been input\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Task editing
          @DynamicTest(order = 9)
          fun tasklistTest26(): CheckResult {
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("add", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("N", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2000-1-1", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
              if (!co.input("0:0", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("My task\n\n", "Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("edit")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2000-01-01 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2000-01-01 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
              if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                  return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")
      
              if (!co.input("priority", "Input the task priority (C, H, N, L):"))
                  return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
              if (!co.input("H", "The task is changed"))
                  return CheckResult(false, "Your output should contain \"The task is changed\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("edit")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2000-01-01 | 00:00 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2000-01-01 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
              if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                  return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")
      
      
              if (!co.input("date", "Input the date (yyyy-mm-dd):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("2001-2-2", "The task is changed"))
                  return CheckResult(false, "Your output should contain \"The task is changed\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("edit")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2001-02-02 | 00:00 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2001-02-02 | 00:00 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
              if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                  return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")
      
              if (!co.input("time", "Input the time (hh:mm):"))
                  return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
              if (!co.input("12:34", "The task is changed"))
                  return CheckResult(false, "Your output should contain \"The task is changed\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("edit")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2001-02-02 | 12:34 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2001-02-02 | 12:34 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My task                                     |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              if (!co.inputNext("Input the task number (1-1):"))
                  return CheckResult(false, "Your output should contain \"Input the task number (1-1):\"")
              if (!co.input("1", "Input a field to edit (priority, date, time, task):"))
                  return CheckResult(false, "Your output should contain \"Input a field to edit (priority, date, time, task):\"")
      
              if (!co.input("task", "Input a new task (enter a blank line to end):"))
                  return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
              if (!co.input("My new task\n\n", "The task is changed"))
                  return CheckResult(false, "Your output should contain \"The task is changed\"")
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              co.getNextOutput("print")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              if (!co.inputNext("| 1  | 2001-02-02 | 12:34 | \u001B[103m \u001B[0m | \u001B[101m \u001B[0m |My new task                                 |"))
                  return CheckResult(false, "Your output should contain" +
                          " \"| 1  | 2001-02-02 | 12:34 | \u001B[102m \u001B[0m | \u001B[101m \u001B[0m |My new task                                 |\"")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Wrong dividing line." +
                          "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
      
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      
          // Long lines
          @DynamicTest(order = 10)
          fun tasklistTest27(): CheckResult {
              val now = Clock.System.now()
              val currentDate = now.toLocalDateTime(TimeZone.of("UTC+2")).date
              val sameDay = currentDate.toString()
              val daysAfter = currentDate.plus(7, DateTimeUnit.DAY).toString()
              val daysBefore = currentDate.minus(7, DateTimeUnit.DAY).toString()
      
              val inputStrings = arrayListOf(
                  arrayOf("C", "2000-1-1", "17:00", "This is a long line, for a new task, demonstrating the 44 characters limit of each line.\n\n"),
                  arrayOf("C", "2000-1-1", "17:00", "These are two long lines, for a new task, each one more than 44 characters\n" +
                          "Used for demonstrating the 44 characters limit of each line.\n\n")
              )
      
              val outputStrings = arrayListOf(
                  arrayOf("| 1  | 2000-01-01 | 17:00 | \u001B[101m \u001B[0m | \u001B[101m \u001B[0m |This is a long line, for a new task, demonst|",
                      "|    |            |       |   |   |rating the 44 characters limit of each line.|"),
                  arrayOf("| 2  | 2000-01-01 | 17:00 | \u001B[101m \u001B[0m | \u001B[101m \u001B[0m |These are two long lines, for a new task, ea|",
                      "|    |            |       |   |   |ch one more than 44 characters              |",
                      "|    |            |       |   |   |Used for demonstrating the 44 characters lim|",
                      "|    |            |       |   |   |it of each line.                            |")
              )
      
              val co = CheckOutput()
              if ( !co.start("Input an action (add, print, edit, delete, end):") )
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              for (taskInput in inputStrings) {
                  if (!co.input("add", "Input the task priority (C, H, N, L):"))
                      return CheckResult(false, "Your output should contain \"Input the task priority (C, H, N, L):\"")
                  if (!co.input(taskInput[0], "Input the date (yyyy-mm-dd):"))
                      return CheckResult(false, "Your output should contain \"Input the date (yyyy-mm-dd):\"")
                  if (!co.input(taskInput[1], "Input the time (hh:mm):"))
                      return CheckResult(false, "Your output should contain \"Input the time (hh:mm):\"")
                  if (!co.input(taskInput[2], "Input a new task (enter a blank line to end):"))
                      return CheckResult(false, "Your output should contain \"Input a new task (enter a blank line to end):\"")
                  if (!co.input(taskInput[3], "Input an action (add, print, edit, delete, end):"))
                      return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
              }
      
              co.getNextOutput("print")
              if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+",
                      "| N  |    Date    | Time  | P | D |                   Task                     |",
                      "+----+------------+-------+---+---+--------------------------------------------+"))
                  return CheckResult(false, "Your output header isn't correct\"")
              for (s in outputStrings) {
                  if (!co.inputNext(*s)) {
                      val str = StringBuilder()
                      s.forEach { str.appendLine(it) }
                      return CheckResult(false, "Your output should contain \"${str.toString()}\"")
                  }
                  if (!co.inputNext("+----+------------+-------+---+---+--------------------------------------------+"))
                      return CheckResult(false, "Wrong dividing line." +
                              "Your output should contain \"+----+------------+-------+---+---+--------------------------------------------+\"")
              }
              if (!co.inputNext("Input an action (add, print, edit, delete, end):"))
                  return CheckResult(false, "Your output should contain \"Input an action (add, print, edit, delete, end):\"")
      
              if (!co.input("end", "Tasklist exiting!"))
                  return CheckResult(false, "Your output should contain \"Tasklist exiting!\"")
      
              if (!co.programIsFinished() )
                  return CheckResult(false, "The application didn't exit.")
              return CheckResult.correct()
          }
      }
      
      class CheckOutput {
          private var main: TestedProgram = TestedProgram()
          var position = 0
          private var caseInsensitive = true
          private var trimOutput = true
          private val arguments= mutableListOf<String>()
          private var isStarted = false
          private var lastOutput = ""
      
          private fun checkOutput(outputString: String, vararg checkStr: String): Boolean {
              var searchPosition = position
              for (cStr in checkStr) {
                  val str = if (caseInsensitive) cStr.lowercase() else cStr
                  val findPosition = outputString.indexOf(str, searchPosition)
                  if (findPosition == -1) return false
                  if ( outputString.substring(searchPosition until findPosition).isNotBlank() ) return false
                  searchPosition = findPosition + str.length
              }
              position = searchPosition
              return true
          }
      
          fun start(vararg checkStr: String): Boolean {
              return if (!isStarted) {
                  var outputString = main.start(*arguments.toTypedArray())
                  lastOutput = outputString
                  if (trimOutput) outputString = outputString.trim()
                  if (caseInsensitive) outputString = outputString.lowercase()
                  isStarted = true
                  checkOutput(outputString, *checkStr)
              } else false
          }
      
          fun stop() {
              main.stop()
          }
      
          fun input(input: String, vararg checkStr: String): Boolean {
              if (main.isFinished) return false
              var outputString = main.execute(input)
              lastOutput = outputString
              if (trimOutput) outputString = outputString.trim()
              if (caseInsensitive) outputString = outputString.lowercase()
              position = 0
              return checkOutput(outputString, *checkStr)
          }
      
          fun inputNext(vararg checkStr: String): Boolean {
              var outputString = lastOutput
              if (trimOutput) outputString = outputString.trim()
              if (caseInsensitive) outputString = outputString.lowercase()
              return checkOutput(outputString, *checkStr)
          }
      
          fun getNextOutput(input: String): String {
              if (main.isFinished) return ""
              val outputString = main.execute(input)
              lastOutput = outputString
              position = 0
              return  outputString
          }
      
          fun getLastOutput(): String { return lastOutput }
          fun programIsFinished(): Boolean  = main.isFinished
          fun setArguments(vararg args: String) { arguments.addAll(args.toMutableList()) }
          fun setCaseSensitivity(caseInsensitive: Boolean) { this.caseInsensitive = caseInsensitive }
          fun setOutputTrim(trimOutput: Boolean) { this.trimOutput = trimOutput}
      }
    
    
    learner_created: false
  - name: src/tasklist/TaskListApplication.kt
    visible: true
    text: |-
      package tasklist
      
      import kotlinx.datetime.LocalDate
      import kotlinx.datetime.LocalDateTime
      
      class TaskListApplication {
          private val repository = TaskRepository()
      
          fun run() {
              var action: String
      
              do {
                  println("Input an action (add, print, edit, delete, end):")
                  action = readln().lowercase().trim()
      
                  when (action) {
                      "add" -> addNewTask()
                      "print" -> printTasks()
                      "edit" -> editTask()
                      "delete" -> deleteTask()
                      "end" -> println("Tasklist exiting!")
                      else -> println("The input action is invalid")
                  }
              } while (action != "end")
          }
      
          private fun addNewTask() {
              val priority: Char = promptForPriority()
              val date: LocalDate = promptForDate()
              val dateTime: LocalDateTime = promptForTime(date)
              val lines: List<String> = promptForTaskLines()
      
              val newTask = Task(priority, dateTime, lines)
      
              repository.addTask(newTask)
          }
      
          private fun editTask() {
              printTasks()
      
              if (repository.isEmpty()) return
      
              while (true) {
                  try {
                      val input = promptForTaskNumber()
      
                      inputFieldToEditLoop@ while (true) {
                          println("Input a field to edit (priority, date, time, task):")
                          val field = readln().trim().lowercase()
                          val taskIndex = input - 1
      
                          when (field) {
                              "priority" -> {
                                  val priority: Char = promptForPriority()
                                  val task = repository.getTask(taskIndex)
                                  val newTask = Task(priority, task.dateTime, task.lines)
      
                                  repository.updateTask(taskIndex, newTask)
      
                                  println("The task is changed")
                                  return
                              }
                              "date" -> {
                                  val task = repository.getTask(taskIndex)
      
                                  val date: LocalDate = promptForDate()
                                  val time: LocalDateTime = task.dateTime
                                  val localDateTime = toLocalDateTime(date, time)
      
                                  val newTask = Task(task.priority, localDateTime, task.lines)
                                  repository.updateTask(taskIndex, newTask)
      
                                  println("The task is changed")
                                  return
                              }
                              "time" -> {
                                  val task = repository.getTask(taskIndex)
      
                                  val date: LocalDate = task.dateTime.date
                                  val time: LocalDateTime = promptForTime(date)
                                  val localDateTime = toLocalDateTime(date, time)
      
                                  val newTask = Task(task.priority, localDateTime, task.lines)
                                  repository.updateTask(taskIndex, newTask)
      
                                  println("The task is changed")
                                  return
                              }
                              "task" -> {
                                  val task = repository.getTask(taskIndex)
      
                                  val lines: List<String> = promptForTaskLines()
                                  val newTask = Task(task.priority, task.dateTime, lines)
      
                                  repository.updateTask(taskIndex, newTask)
      
                                  println("The task is changed")
                                  return
                              }
                              else -> println("Invalid field")
                          }
                      }
                  } catch (e: Exception) {
                      println("Invalid task number")
                  }
              }
          }
      
          private fun deleteTask() {
              printTasks()
      
              if (repository.isEmpty()) return
      
              while (true) {
                  try {
                      val input = promptForTaskNumber()
      
                      repository.removeTask(input - 1)
                      println("The task is deleted")
                      return
                  } catch (e: Exception) {
                      println("Invalid task number")
                  }
              }
          }
      
          private fun toLocalDateTime(date: LocalDate, time: LocalDateTime): LocalDateTime {
              return LocalDateTime(date.year, date.monthNumber, date.dayOfMonth, time.hour, time.minute)
          }
      
          private fun promptForTaskNumber(): Int {
              println("Input the task number (1-${repository.size}):")
              val input = readln().toInt()
      
              if (input !in 1..repository.size) throw Exception("Invalid task number")
      
              return input
          }
      
          private fun promptForTaskLines(): List<String> {
              while (true) {
                  println("Input a new task (enter a blank line to end):")
                  val lines = generateSequence { readlnOrNull()?.trim() }
                      .takeWhile { it.isNotBlank() }
                      .toList()
      
                  if (lines.isEmpty()) println("The task is blank")
      
                  return lines
              }
          }
      
          private fun promptForPriority(): Char {
              val validPriorities = listOf('C', 'H', 'N', 'L')
      
              while (true) {
                  println("Input the task priority (C, H, N, L):")
                  val input = readln().trim().uppercase()
      
                  if (input.length == 1 && input[0] in validPriorities) {
                      return input[0]
                  }
              }
          }
      
          private fun promptForDate(): LocalDate {
              while (true) {
                  println("Input the date (yyyy-mm-dd):")
                  try {
                      val (inputYear, inputMonth, inputDay) = readln().trim().split('-').map { it.toInt() }
                      return LocalDate(inputYear, inputMonth, inputDay)
                  } catch (e: Exception) {
                      println("The input date is invalid")
                  }
              }
          }
      
          private fun promptForTime(date: LocalDate): LocalDateTime {
              while (true) {
                  println("Input the time (hh:mm):")
                  try {
                      val (hours, minutes) = readln().trim().split(':').map { it.toInt() }
                      return LocalDateTime(date.year, date.monthNumber, date.dayOfMonth, hours, minutes)
                  } catch (e: Exception) {
                      println("The input time is invalid")
                  }
              }
          }
      
          private fun printTasks() {
              if (repository.isEmpty()) {
                  println("No tasks have been input")
                  return
              }
      
              repository.getTasks().forEachIndexed { index, task ->
                  task.printTask(index)
                  println();
              }
          }
      }
    learner_created: true
  - name: src/tasklist/Task.kt
    visible: true
    text: |-
      package tasklist
      
      import kotlinx.datetime.*
      
      class Task(var priority: Char, var dateTime: LocalDateTime, var lines: List<String>) {
          fun printTask(number: Int) {
              printHeader(number)
              printLines()
          }
      
          private fun printHeader(number: Int) {
              val hour = String.format("%02d", dateTime.hour)
              val minute = String.format("%02d", dateTime.minute)
      
              print("${(number + 1).toString().padEnd(2, ' ')} ")
              println("${dateTime.date} $hour:$minute $priority ${getDueTag()}")
          }
      
          private fun printLines() {
              lines.forEach { line ->
                  println("   $line")
              }
          }
      
          private fun getDueTag(): Char {
              val currentDate = Clock.System.now().toLocalDateTime(TimeZone.of("UTC+0")).date
              val numberOfDays = currentDate.daysUntil(dateTime.date)
      
              return if (numberOfDays > 0) {
                  'I'
              } else if (numberOfDays < 0) {
                  'O'
              } else {
                  'T'
              }
          }
      }
    learner_created: true
  - name: src/tasklist/TaskRepository.kt
    visible: true
    text: |-
      package tasklist
      
      class TaskRepository {
          private val tasks = mutableListOf<Task>()
      
          val size: Int
              get() = tasks.size
      
          fun addTask(task: Task) {
              tasks.add(task)
          }
      
          fun getTask(index: Int): Task {
              return tasks[index]
          }
      
          fun getTasks(): List<Task> {
              return tasks
          }
      
          fun removeTask(index: Int) {
              tasks.removeAt(index)
          }
      
          fun updateTask(index: Int, task: Task) {
              tasks[index] = task
          }
      
          fun isEmpty(): Boolean {
              return tasks.isEmpty()
          }
      }
    learner_created: true
  - name: src/tasklist/Table.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/18598#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 18 Feb 2024 16:55:33 UTC"
record: 5
